plugins	{
	// id 'java'
	// id 'org.springframework.boot' version '3.4.1'
	// id 'io.spring.dependency-management' version '1.1.7'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//implementation 'org.springframework.boot:spring-boot-starter-web'
	//implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '3.4.1'

	
	
	implementation 'org.springframework.cloud:spring-cloud-starter'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'com.amazonaws:aws-java-sdk:1.12.773'

	implementation 'org.apache.poi:poi-ooxml:5.3.0'

	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
		

	implementation project(':common')


	runtimeOnly 'org.postgresql:postgresql'	
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	//runtimeOnly 'com.mysql:mysql-connector-j'

	// QueryDSL start
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	// QueryDSL end

	testImplementation 'org.springframework.kafka:spring-kafka-test'

}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 설정
def querydslDir = "$buildDir/generated/querydsl"

querydsl{
	library = "com.querydsl:querydsl-apt"
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets{
	main {
		java {
			srcDirs = ['src/main/java', querydslDir]
		}
	}
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
configurations{
	querydsl.extendsFrom compileClasspath
}

clean {
	delete file(querydslDir)
}