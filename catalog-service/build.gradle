plugins	{
	// id 'java'
	// id 'org.springframework.boot' version '3.4.1'
	// id 'io.spring.dependency-management' version '1.1.7'	
}

// Lombok 설정 (Querydsl과 함께 사용 시 필수)
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//implementation 'org.springframework.boot:spring-boot-starter-web'
	//implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '3.4.1'

	
	
	implementation 'org.springframework.cloud:spring-cloud-starter'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'com.amazonaws:aws-java-sdk:1.12.773'

	implementation 'org.apache.poi:poi-ooxml:5.3.0'

	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
		

	implementation project(':common')


	runtimeOnly 'org.postgresql:postgresql'	
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	//runtimeOnly 'com.mysql:mysql-connector-j'

	// QueryDSL start	
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.querydsl:querydsl-core:5.0.0'
    
    // Q-클래스 생성을 위한 annotationProcessor 의존성
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    
    // JPA 엔티티를 인식시키기 위한 의존성
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	// QueryDSL end

	testImplementation 'org.springframework.kafka:spring-kafka-test'

}

tasks.named('test') {
	useJUnitPlatform()
}

// Q-클래스 생성 경로 설정
def generated = 'src/main/generated'

// 빌드 시 Q-클래스 디렉토리 삭제
clean {
    delete file(generated)
}

// Q-클래스 생성 디렉토리 지정
tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

// 생성된 Q-클래스 경로를 소스 경로에 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}